# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nPGWYin06P6BYa4K_PkNp54KiL0qnSm
"""

# Commented out IPython magic to ensure Python compatibility.
try : 
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

"""# 5.1 Binary Classification"""

import pandas as pd
import matplotlib.pyplot as plt

red = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',sep=';')
white = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',sep=';')

red['type'] = 0
white['type'] = 1
print(red.head(2))
print(white.head(2))

wine = pd.concat([red,white])

plt.hist(wine['type'])
plt.xticks([0,1])
plt.show()

print(wine['type'].value_counts())

"""정규화"""

import pandas as pd
import matplotlib.pyplot as plt

red = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',sep=';')
white = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',sep=';')

red['type'] = 0
white['type'] = 1
print(red.head(2))
print(white.head(2))

wine = pd.concat([red,white])

wine_norm = (wine - wine.min()) / (wine.max() - wine.min())
print(wine_norm.head())
print(wine_norm.describe())
#print(wine['type'].value_counts())

"""train data와 test data 나누기"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf


red = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',sep=';')
white = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',sep=';')

red['type'] = 0
white['type'] = 1
print(red.head(2))
print(white.head(2))

wine = pd.concat([red,white])

wine_norm = (wine - wine.min()) / (wine.max() - wine.min())

wine_shuffle = wine_norm.sample(frac =1)
#print(wine_shuffle.head())
wine_np = wine_shuffle.to_numpy()
#print(wine_np[:5])
train_idx = int(len(wine_np)*0.8)
train_X, train_Y = wine_np[:train_idx, :-1], wine_np[:train_idx,-1]
test_X, test_Y = wine_np[train_idx:, :-1], wine_np[train_idx:,-1]

train_Y = tf.keras.utils.to_categorical(train_Y,num_classes=2)
test_Y = tf.keras.utils.to_categorical(test_Y,num_classes=2)

"""딥러닝"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf


red = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',sep=';')
white = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',sep=';')

red['type'] = 0
white['type'] = 1
print(red.head(2))
print(white.head(2))

wine = pd.concat([red,white])

wine_norm = (wine - wine.min()) / (wine.max() - wine.min())

wine_shuffle = wine_norm.sample(frac =1)
#print(wine_shuffle.head())
wine_np = wine_shuffle.to_numpy()
#print(wine_np[:5])
train_idx = int(len(wine_np)*0.8)
train_X, train_Y = wine_np[:train_idx, :-1], wine_np[:train_idx,-1]
test_X, test_Y = wine_np[train_idx:, :-1], wine_np[train_idx:,-1]

train_Y = tf.keras.utils.to_categorical(train_Y,num_classes=2)
test_Y = tf.keras.utils.to_categorical(test_Y,num_classes=2)

model = tf.keras.Sequential([
      tf.keras.layers.Dense(units=48, activation='relu',input_shape=(12,)),
      tf.keras.layers.Dense(units=24, activation='relu'),
      tf.keras.layers.Dense(units=12, activation='relu'),
      tf.keras.layers.Dense(units=2, activation='softmax'),
])

model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.07),
              loss='sparse_categorical_crossentropy', metrics=['accuracy'])

#model.summary()
train_Y = np.argmax(train_Y, axis=1)
history = model.fit(train_X, train_Y, epochs=25, batch_size=32, validation_split=0.25)

"""시각화"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt



red = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',sep=';')
white = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',sep=';')

red['type'] = 0
white['type'] = 1
print(red.head(2))
print(white.head(2))

wine = pd.concat([red,white])

wine_norm = (wine - wine.min()) / (wine.max() - wine.min())

wine_shuffle = wine_norm.sample(frac =1)
#print(wine_shuffle.head())
wine_np = wine_shuffle.to_numpy()
#print(wine_np[:5])
train_idx = int(len(wine_np)*0.8)
train_X, train_Y = wine_np[:train_idx, :-1], wine_np[:train_idx,-1]
test_X, test_Y = wine_np[train_idx:, :-1], wine_np[train_idx:,-1]

train_Y = tf.keras.utils.to_categorical(train_Y,num_classes=2)
test_Y = tf.keras.utils.to_categorical(test_Y,num_classes=2)

model = tf.keras.Sequential([
      tf.keras.layers.Dense(units=48, activation='relu',input_shape=(12,)),
      tf.keras.layers.Dense(units=24, activation='relu'),
      tf.keras.layers.Dense(units=12, activation='relu'),
      tf.keras.layers.Dense(units=2, activation='softmax'),
])

model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.07),
              loss='sparse_categorical_crossentropy', metrics=['accuracy'])

#model.summary()
train_Y = np.argmax(train_Y, axis=1)
history = model.fit(train_X, train_Y, epochs=25, batch_size=32, validation_split=0.25)

#plt.figure(figsize=(12,4))

#plt.subplot(1,2,1)
#plt.plot(history.history['loss'],'b-',label='loss')
#plt.plot(hist)
test_Y = np.argmax(test_Y, axis=1)
model.evaluate(test_X,test_Y)

"""# 5.2 다항 분류"""

import pandas as pd
import matplotlib.pyplot as plt

red = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv',sep=';')
white = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv',sep=';')

red['type'] = 0
white['type'] = 1
print(red.head(2))
print(white.head(2))

wine = pd.concat([red,white])
wine.loc[wine['quality'] <= '5', 'new_quality'] = 0
wine.loc[wine['quality'] == '6', 'new_quality'] = 1
wine.loc[wine['quality'] > '6', 'new_quality'] = 2
print(wine['quality'].describe())
print(wine['quality'].value_counts())
plt.hist(wine['quality'],bins=7,rwidth=0.8)
plt.show()